# Default values for perses.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Override name of the chart used in Kubernetes object names.
nameOverride: ""

# -- Override fully qualified app name
fullnameOverride: ""

## Image of Perses
##
image:
  # -- Perses image repository and name
  name: "persesdev/perses"

  # -- Overrides the image tag whose default is the chart appVersion.
  version: ""

  # -- Default image pull policy
  pullPolicy: IfNotPresent

additionalLabels:
  {}
  # app: perses

# -- Service account for Perses to use.
serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# -- Expose the Perses service to be accessed from outside the cluster (LoadBalancer service).
# or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
service:
  # -- Annotations to add to the service
  annotations: {}
  # -- Labels to add to the service
  labels: {}
  # -- Service Type
  type: "ClusterIP"
  # -- Service Port Name
  portName: http
  # -- Service Port
  port: 8080
  # -- Perses running port
  targetPort: 8080

serviceMonitor:
  # -- Create a serviceMonitor for Perses
  selfMonitor: false

  # -- Labels to add to the ServiceMonitor so that Prometheus can discover it.
  # These labels should match the 'serviceMonitorSelector.matchLabels' defined in your Prometheus CR.
  labels: {}

  selector:
    # -- Selector used by the ServiceMonitor to find which Perses service to scrape metrics from.
    # These matchLabels should match the labels on your Perses service.
    matchLabels: {}

  # -- Interval for the serviceMonitor
  interval: 30s

# -- Statefulset Annotations
annotations: {}

# -- Number of pod replicas.
replicas: 1

# -- Log level for Perses be configured in
# available options "panic", "error", "warning", "info", "debug", "trace"
logLevel: info

# -- Liveness probe configuration
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 60
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# -- Readiness probe configuration
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 5

# -- Additional arguments to pass to perses.
# Set to null for argumentless flags
extraArgs:
  {}
  # web.hide-port: null

# -- Additional volumes on the output StatefulSet definition.
volumes: []

# -- Additional VolumeMounts on the output StatefulSet definition.
volumeMounts: []

# -- TLS configuration for mounting certificates from Kubernetes secrets
tls:
  # -- Enable TLS certificate mounting
  enabled: false

  # -- CA Certificate configuration
  # Certificates will be mounted to the directory specified in mountPath
  caCert:
    # -- Enable CA certificate mounting
    enabled: false
    # -- Name of the Kubernetes secret containing the CA certificate
    # Defaults to "release-name-tls" if not specified
    secretName: ""
    # -- Mount path for the CA certificate directory
    mountPath: "/ca"

  # -- Client Certificate configuration (contains both cert and key)
  # Certificates will be mounted to the directory specified in mountPath
  clientCert:
    # -- Enable client certificate mounting
    enabled: false
    # -- Name of the Kubernetes secret containing the client certificate and key
    # Defaults to "release-name-tls" if not specified
    secretName: ""
    # -- Mount path for the client certificate directory
    mountPath: "/tls"

# -- Resource limits & requests.
# Update according to your own use case as these values might be too low for a typical deployment.
# ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources:
  {}

  #  limits:
  #    cpu: 100m
  #    memory: 128Mi
  #  requests:
  #    cpu: 100m
  #    memory: 128Mi

# -- Perses configuration file
# ref: https://github.com/perses/perses/blob/main/docs/configuration/configuration.md
config:
  # -- Annotations for config
  annotations: {}

  # -- Use it in case you want to prefix the API path. By default the API is served with the path /api.
  # With this config, it will be served with the path <api_prefix>/api
  api_prefix: ""

  security:
    # -- Configure Perses instance as readonly
    readonly: false
    # -- Enable Authentication
    enable_auth: false
    # -- cookie config
    cookie:
      same_site: lax
      secure: false
      # [ same_site: < enum | possibleValue = 'strict' | 'lax' | 'none' > | default = lax ]
      # Set to true if you host Perses behind HTTPS. Default is false
      # [ secure: <boolean> | default = false ]

  # -- Frontend configuration
  frontend:
    explorer:
      enable: true
    # -- Information contains markdown content to be display on the home page
    information: ""
    # -- Important dashboards list
    important_dashboards:
      []
      # - project: "perses"
      #   dashboard: "Demo"

  # -- Database config based on data base type
  database:
    # -- file system configs
    file:
      folder: /perses
      extension: json
    # -- SQL Config
    # sql:
    #   user: "user"
    #   password: "password"
    #   net: "tcp"
    #   addr: "localhost:3306"
    #   db_name: "perses"
    #   allow_native_passwords: true

  # -- provisioning config
  provisioning:
    folders:
      - /etc/perses/provisioning
    interval: 10m

# --  Sidecar configuration that watches for ConfigMaps with the specified label/labelValue and loads them into Perses provisioning
sidecar:
  # -- Enable the sidecar container for ConfigMap provisioning
  enabled: false
  image:
    # -- Container image repository for the sidecar
    repository: kiwigrid/k8s-sidecar
    # -- Container image tag for the sidecar
    tag: 1.30.7
  # -- Label key to watch for ConfigMaps containing Perses resources
  label: "perses.dev/resource"
  # -- Label value to watch for ConfigMaps containing Perses resources
  labelValue: "true"
  # -- check for configmaps from all namespaces. When set to false, it will only check for configmaps in the same namespace as the Perses instance
  allNamespaces: true
  # -- add additional environment variables to sidecar container. you can look at the k8s-sidecar documentation for more information - https://github.com/kiwigrid/k8s-sidecar
  extraEnvVars:
    []
    # - name: RESOURCE
    #   value: both
  # -- Enable secret access permissions in the cluster role. When enabled, the sidecar will have permissions to read secrets and use them.
  enableSecretAccess: false

# -- Persistence parameters
persistence:
  # -- If disabled, it will use a emptydir volume
  enabled: false

  # -- Specify the `storageClass` to provision the volume for the PVC. If you don't specify a `storageClass`, a default `storageClass` will be used.
  # storageClass: ""

  # -- PVC Access Modes for data volume
  accessModes:
    - ReadWriteOnce

  # -- PVC Storage Request for data volume
  size: 8Gi

  # -- Security context for the PVC when persistence is enabled
  securityContext:
    fsGroup: 2000

  # -- Labels for the PVC
  labels: {}
  # -- Annotations for the PVC
  annotations: {}

# -- Configure the ingress resource that allows you to access Perses Frontend
# ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Enable ingress controller resource
  enabled: false

  # -- Default host for the ingress resource
  hosts:
    - host: perses.local
      paths:
        - path: /
          pathType: Prefix

  # -- IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)
  # This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster .
  # ref: https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/
  #
  ingressClassName: ""

  # -- Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.
  # For a full list of possible ingress annotations, please see
  # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/user-guide/nginx-configuration/annotations.md
  annotations: {}

  # -- Ingress TLS configuration
  tls: []
#    - secretName: ingress-cert
#      hosts: []

# -- Configure datasources
# DEPRECATED: This field will be removed in the future release. Please use the 'sidecar' configuration to provision datasources.
# ref: https://github.com/perses/perses/blob/90beed356243208f14cf2249bebb6f6222cb77ae/docs/datasource.md
datasources:
  []
  # - kind: GlobalDatasource
  #   metadata:
  #     name: PrometheusDemoBrowser
  #   spec:
  #     default: true
  #     plugin:
  #       kind: PrometheusDatasource
  #       spec:
  #         directUrl: https://prometheus.demo.do.prometheus.io

testFramework:
  enabled: true
  image:
    registry: ghcr.io
    repository: cloudoperators/greenhouse-extensions-integration-test
    tag: main
  imagePullPolicy: IfNotPresent

# -- Deploy extra K8s manifests
extraObjects:
  []
  # - apiVersion: v1
  #   kind: ConfigMap
  #   metadata:
  #     name: 'truststore-{{ include "perses.fullname" . }}'
  #   data:
  #     ca.crt: |
  #       -----BEGIN CERTIFICATE-----
  #       -----END CERTIFICATE-----
